spatial_domain_level_1,
spatial_domain_level_2,
broad_region,
registration_landmark)
sort(unique(jaccard_df$broad_region))
# convert cell label to rownames
jaccard_df <- jaccard_df %>%
tibble::column_to_rownames("cell_id")
# convert spatial domain level 1 and parcellation division to factors
cl <- jaccard_df$spatial_domain_level_1
names(cl) <- rownames(jaccard_df)
cl <- as.factor(cl)
ref.cl <- jaccard_df$broad_region
names(ref.cl) <- rownames(jaccard_df)
ref.cl <- as.factor(ref.cl)
# create a table of the number of cells in each cluster
tb <- table(cl, ref.cl)
# set minimum threshold for number of cells in a cluster
min.th = 1
# remove rows with less than min.th cells
tb.df <- as.data.frame(tb)
tb.df <- tb.df[tb.df$Freq >= min.th,]
# create a table of the number of cells in each cluster
cl.size <- table(cl)
ref.cl.size <- table(ref.cl)
# Compute Jaccard statistics for each pair of clusters
tb.df$jaccard <- as.vector(tb.df$Freq / (cl.size[as.character(tb.df[,1])] + ref.cl.size[as.character(tb.df[,2])] - tb.df$Freq))
# reorder ref.cl and cl
tb.df$ref.cl <- factor(tb.df$ref.cl,
levels = spatial_domain_1_color$spatial_domain_level_1)
tb.df$cl <- factor(tb.df$cl,
levels = broad_ccf_color$ccf_broad)
broad_ccf_color$ccf_broad
spatial_domain_1_color$spatial_domain_level_1
suppressPackageStartupMessages({
library(dplyr)
library(tibble)
library(tidyr)
library(stringr)
library(ggplot2)
library(grid)
library(gridExtra)
library(anndata)
library(googlesheets4)
library(data.table)
library(reshape)
library(forcats)
library(entropy)
library(aplot)
library(vegan)
library(ggridges)
library(scales)
library(DescTools)
library(RColorBrewer)
library(philentropy)
library(igraph)
library(paletteer)
library(randomcoloR)
})
############### setup environment ######################
options(stringsAsFactors = FALSE)
options(scipen=999)
options(mc.cores=30)
gs4_deauth()
proportion_colors <- c('#005DFFFF',
"#0080FFFF",
"#00A2FFFF",
'#00C3FFFF',
"#00E5FFFF",
"#00FF4DFF",
"#00FF2BFF",
"#00FF08FF",
'#1AFF00FF',
"#3CFF00FF",
"#5DFF00FF",
"#80FF00FF",
"#A2FF00FF",
"#C3FF00FF",
"#E6FF00FF",
"#FFFF00FF",
"#FFF514FF",
"#FFEC28FF",
"#FFE53CFF",
"#FFE04FFF",
"#FFDC63FF",
"#FFD100FF",
"#FFC500FF",
"#FFB900FF",
"#FFAE00FF",
"#FFA200FF",
"#FF9700FF",
"#FF8B00FF",
"#FF8000FF",
"#FF7400FF",
"#FF6800FF",
"#FF5D00FF",
"#FF5100FF",
"#FF4600FF",
"#FF3A00FF",
"#FF2E00FF",
"#FF2300FF",
"#FF1700FF")
cl.df <- read_sheet("https://docs.google.com/spreadsheets/d/1T86EppILF-Q97OjJyd4R2FjUmPUrdYBUEbbiXqgWEoE/edit#gid=1639101745",sheet = "cl.df.v9_230722")
# select only necessary columns
cl.df <- cl.df %>%
dplyr::select(cluster_id_label,
nt_type_label,
nt_type_combo_label)
sd.df <- read_sheet("https://docs.google.com/spreadsheets/d/1SdmQooCJtqq__n0D7INn12yTmIHwsJ6KeO5mGhR2OBU/edit?gid=0#gid=0", sheet = "spatial_domains")
# select only necessary columns
sd.df <- sd.df %>%
dplyr::select(Cluster_id,
spatial_domain_level_1,
spatial_domain_level_2,
graph_order,
ccf_broad)
# load landmark annotation per cluster
cl.anat.df <- read_sheet("https://docs.google.com/spreadsheets/d/1v7PDfLc_9vOcuz_WKk5ZiSUKjbu3xCux9VanVOA7QOE/edit?gid=612105623#gid=612105623", sheet = "cluster_region_annotation")
cl.anat.df <- cl.anat.df %>%
select(cluster_id_label,
broad_region,
registration_landmark)
broad_ccf_color <- read_sheet("https://docs.google.com/spreadsheets/d/1SdmQooCJtqq__n0D7INn12yTmIHwsJ6KeO5mGhR2OBU/edit?gid=0#gid=0", sheet = "CCF_broad_region_color")
broad_ccf_color_palette <- setNames(broad_ccf_color$color_hex_tripet, broad_ccf_color$ccf_broad)
# order by graph order
broad_ccf_color <- broad_ccf_color %>%
arrange(desc(graph_order))
spatial_domain_color <- read_sheet("https://docs.google.com/spreadsheets/d/1SdmQooCJtqq__n0D7INn12yTmIHwsJ6KeO5mGhR2OBU/edit?gid=0#gid=0", sheet = "spatial_domains")
spatial_domain_palette <- setNames(spatial_domain_color$spatial_domain_level_2_color, spatial_domain_color$spatial_domain_level_2)
# order by graph order
spatial_domain_color <- spatial_domain_color %>%
arrange(desc(graph_order))
spatial_domain_1_color <- read_sheet("https://docs.google.com/spreadsheets/d/1SdmQooCJtqq__n0D7INn12yTmIHwsJ6KeO5mGhR2OBU/edit?gid=0#gid=0", sheet = "spatial_domain_level_1_color")
spatial_domain_1_palette <- setNames(spatial_domain_1_color$spatial_domain_level_1_color, spatial_domain_1_color$spatial_domain_level_1)
# order by graph order
spatial_domain_1_color <- spatial_domain_1_color %>%
arrange(desc(graph_order))
broad_landmarks_color <- read_sheet("https://docs.google.com/spreadsheets/d/1SdmQooCJtqq__n0D7INn12yTmIHwsJ6KeO5mGhR2OBU/edit?gid=0#gid=0", sheet = "broad_landmarks")
broad_landmarks_color <- read_sheet("https://docs.google.com/spreadsheets/d/1SdmQooCJtqq__n0D7INn12yTmIHwsJ6KeO5mGhR2OBU/edit?gid=0#gid=0", sheet = "broad_landmarks")
source("~/capsule/code/spatial_domain_analysis.R")
plot
# make a dot plot where the size of the dot is proportional to tb.df$Freq and the color is proportional to tb.df$jaccard
plot <- ggplot(tb.df,
aes(x = cl,
y = ref.cl)) +
geom_point(aes(size = sqrt(Freq),
color = jaccard)) +
theme(axis.text.x = element_text(vjust = 0.2,
hjust = 1,
angle = 45,
size = 8),
axis.text.y = element_text(size = 8),
panel.background = element_rect(fill = "white")) +
scale_color_gradient(low = "yellow",
high = "darkblue") +
scale_size(range = c(0, 5))
ggsave(filename = "/results/jaccard.pdf",
plot = plot,
width = 14,
height = 6,
dpi = 160)
ggsave(filename = "/results/jaccard.pdf",
plot = plot,
width = 14,
height = 10,
dpi = 160)
# make a dot plot where the size of the dot is proportional to tb.df$Freq and the color is proportional to tb.df$jaccard
plot <- ggplot(tb.df,
aes(x = cl,
y = ref.cl)) +
geom_point(aes(size = sqrt(Freq),
color = jaccard)) +
theme(axis.text.x = element_text(vjust = 0.2,
hjust = 1,
angle = 45,
size = 8),
axis.text.y = element_text(size = 8),
panel.background = element_rect(fill = "white")) +
labs(x = "Spatial domaind level 1", y = "Region specific clusters")
# make a dot plot where the size of the dot is proportional to tb.df$Freq and the color is proportional to tb.df$jaccard
plot <- ggplot(tb.df,
aes(x = cl,
y = ref.cl)) +
geom_point(aes(size = sqrt(Freq),
color = jaccard)) +
theme(axis.text.x = element_text(vjust = 0.2,
hjust = 1,
angle = 45,
size = 8),
axis.text.y = element_text(size = 8),
panel.background = element_rect(fill = "white")) +
labs(x = "Spatial domaind level 1", y = "Region specific clusters") +
scale_color_gradient(low = "yellow",
high = "darkblue") +
scale_size(range = c(0, 5))
ggsave(filename = "/results/jaccard.pdf",
plot = plot,
width = 14,
height = 10,
dpi = 160)
# make a dot plot where the size of the dot is proportional to tb.df$Freq and the color is proportional to tb.df$jaccard
plot <- ggplot(tb.df,
aes(x = fct_rev(cl),
y = ref.cl)) +
geom_point(aes(size = sqrt(Freq),
color = jaccard)) +
theme(axis.text.x = element_text(vjust = 0.2,
hjust = 1,
angle = 45,
size = 8),
axis.text.y = element_text(size = 8),
panel.background = element_rect(fill = "white")) +
labs(x = "Spatial domaind level 1", y = "Region specific clusters") +
scale_color_gradient(low = "yellow",
high = "darkblue") +
scale_size(range = c(0, 5))
ggsave(filename = "/results/jaccard.pdf",
plot = plot,
width = 14,
height = 10,
dpi = 160)
suppressPackageStartupMessages({
library(dplyr)
library(tibble)
library(tidyr)
library(stringr)
library(ggplot2)
library(grid)
library(gridExtra)
library(anndata)
library(googlesheets4)
library(data.table)
library(reshape)
library(forcats)
library(entropy)
library(aplot)
library(vegan)
library(ggridges)
library(scales)
library(DescTools)
library(RColorBrewer)
library(philentropy)
library(igraph)
library(paletteer)
library(randomcoloR)
})
options(stringsAsFactors = FALSE)
options(scipen=999)
options(mc.cores=30)
gs4_deauth()
proportion_colors <- c('#005DFFFF',
"#0080FFFF",
"#00A2FFFF",
'#00C3FFFF',
"#00E5FFFF",
"#00FF4DFF",
"#00FF2BFF",
"#00FF08FF",
'#1AFF00FF',
"#3CFF00FF",
"#5DFF00FF",
"#80FF00FF",
"#A2FF00FF",
"#C3FF00FF",
"#E6FF00FF",
"#FFFF00FF",
"#FFF514FF",
"#FFEC28FF",
"#FFE53CFF",
"#FFE04FFF",
"#FFDC63FF",
"#FFD100FF",
"#FFC500FF",
"#FFB900FF",
"#FFAE00FF",
"#FFA200FF",
"#FF9700FF",
"#FF8B00FF",
"#FF8000FF",
"#FF7400FF",
"#FF6800FF",
"#FF5D00FF",
"#FF5100FF",
"#FF4600FF",
"#FF3A00FF",
"#FF2E00FF",
"#FF2300FF",
"#FF1700FF")
cl.df <- read_sheet("https://docs.google.com/spreadsheets/d/1T86EppILF-Q97OjJyd4R2FjUmPUrdYBUEbbiXqgWEoE/edit#gid=1639101745",sheet = "cl.df.v9_230722")
# select only necessary columns
cl.df <- cl.df %>%
dplyr::select(cluster_id_label,
nt_type_label,
nt_type_combo_label)
sd.df <- read_sheet("https://docs.google.com/spreadsheets/d/1SdmQooCJtqq__n0D7INn12yTmIHwsJ6KeO5mGhR2OBU/edit?gid=0#gid=0", sheet = "spatial_domains")
# select only necessary columns
sd.df <- sd.df %>%
dplyr::select(Cluster_id,
spatial_domain_level_1,
spatial_domain_level_2,
graph_order,
ccf_broad)
# load landmark annotation per cluster
cl.anat.df <- read_sheet("https://docs.google.com/spreadsheets/d/1v7PDfLc_9vOcuz_WKk5ZiSUKjbu3xCux9VanVOA7QOE/edit?gid=612105623#gid=612105623", sheet = "cluster_region_annotation")
cl.anat.df <- cl.anat.df %>%
select(cluster_id_label,
broad_region,
registration_landmark)
broad_ccf_color <- read_sheet("https://docs.google.com/spreadsheets/d/1SdmQooCJtqq__n0D7INn12yTmIHwsJ6KeO5mGhR2OBU/edit?gid=0#gid=0", sheet = "CCF_broad_region_color")
broad_ccf_color_palette <- setNames(broad_ccf_color$color_hex_tripet, broad_ccf_color$ccf_broad)
# order by graph order
broad_ccf_color <- broad_ccf_color %>%
arrange(desc(graph_order))
spatial_domain_color <- read_sheet("https://docs.google.com/spreadsheets/d/1SdmQooCJtqq__n0D7INn12yTmIHwsJ6KeO5mGhR2OBU/edit?gid=0#gid=0", sheet = "spatial_domains")
spatial_domain_palette <- setNames(spatial_domain_color$spatial_domain_level_2_color, spatial_domain_color$spatial_domain_level_2)
# order by graph order
spatial_domain_color <- spatial_domain_color %>%
arrange(desc(graph_order))
spatial_domain_1_color <- read_sheet("https://docs.google.com/spreadsheets/d/1SdmQooCJtqq__n0D7INn12yTmIHwsJ6KeO5mGhR2OBU/edit?gid=0#gid=0", sheet = "spatial_domain_level_1_color")
spatial_domain_1_palette <- setNames(spatial_domain_1_color$spatial_domain_level_1_color, spatial_domain_1_color$spatial_domain_level_1)
# order by graph order
spatial_domain_1_color <- spatial_domain_1_color %>%
arrange(desc(graph_order))
broad_landmarks_color <- read_sheet("https://docs.google.com/spreadsheets/d/1SdmQooCJtqq__n0D7INn12yTmIHwsJ6KeO5mGhR2OBU/edit?gid=0#gid=0", sheet = "broad_landmarks_anno")
broad_landmarks_color_palette <- setNames(broad_landmarks_color$broad_region_color, broad_landmarks_color$broad_region)
# order by graph order
broad_landmarks_color <- broad_landmarks_color %>%
arrange(desc(graph_order))
# read in metadata file
load("/scratch/638850_metadata_sis.rda")
load("/scratch/638850_reconstructed_coordinates_sis.rda")
metadata_sis <- merge(metadata_sis,
coordinates_sis,
by = 0)
metadata_sis <- metadata_sis %>%
mutate(temp = flat_CDM_class_name) %>%
separate(temp,
into = c("flat_CDM_class_id", "flat_CDM_class_string"),
sep = " ",
extra = "merge",
fill = "right")
metadata_sis <- metadata_sis %>%
mutate(temp = flat_CDM_subclass_name) %>%
separate(temp,
into = c("flat_CDM_subclass_id", "flat_CDM_subclass_string"),
sep = " ",
extra = "merge",
fill = "right")
metadata_sis <- metadata_sis %>%
mutate(temp = flat_CDM_supertype_name) %>%
separate(temp,
into = c("flat_CDM_supertype_id", "flat_CDM_supertype_string"),
sep = " ",
extra = "merge",
fill = "right")
metadata_sis <- metadata_sis %>%
mutate(temp = flat_CDM_cluster_name) %>%
separate(temp,
into = c("flat_CDM_cluster_id", "flat_CDM_cluster_string"),
sep = " ",
extra = "merge",
fill = "right")
metadata_sis <- merge(metadata_sis,
cl.df,
by.x = "flat_CDM_cluster_name",
by.y = "cluster_id_label",
all.x = T,
all.y = F)
metadata_sis <- merge(metadata_sis,
cl.anat.df,
by.x = "flat_CDM_cluster_name",
by.y = "cluster_id_label",
all.x = T,
all.y = F)
metadata_sis <- merge(metadata_sis,
sd.df,
by.x = "leiden_res_1.2_knn_8",
by.y = "Cluster_id",
all.x = T,
all.y = F)
metadata_subset <- metadata_sis %>%
filter(final_filter == F) %>%
filter(!is.na(spatial_domain_level_1)) %>%
filter(spatial_domain_level_1 != "LQ") %>%
select(cell_id,
section,
leiden_res_1.2_knn_8,
flat_CDM_class_name,
flat_CDM_class_id,
flat_CDM_subclass_name,
flat_CDM_subclass_id,
flat_CDM_supertype_name,
flat_CDM_supertype_id,
flat_CDM_cluster_label,
flat_CDM_cluster_id,
nt_type_label,
nt_type_combo_label,
structure_acronym,
structure_id,
spatial_domain_level_1,
spatial_domain_level_2,
graph_order,
ccf_broad,
CCF_level1,
CCF_level2,
x_reconstructed,
y_reconstructed,
z_reconstructed,
mapped)
# grab colors for the different levels of cell types. Thsoe will be used later for plotting
ss <- "https://docs.google.com/spreadsheets/d/1a4URa_t3oc824vjIA8LcyYmJrv0-2Rm7Q5eJq42re2c/edit?usp=sharing"
class_colors <- read_sheet(ss,sheet="classes")
subclass_colors <- read_sheet(ss, sheet="subclasses")
supertype_colors <- read_sheet(ss, sheet="supertypes")
rcol <- read_sheet(ss, sheet = "Region")
nt_type_col <- read_sheet(ss, sheet = "nt_type")
############ create helper data frames for plotting ####################
region.mapping <- metadata_subset %>%
select(ccf_broad,spatial_domain_level_2,graph_order) %>%
group_by(spatial_domain_level_2) %>%
slice(1) %>%
arrange(desc(graph_order)) %>%
drop_na()
add.meta <- metadata_subset %>%
select(flat_CDM_subclass_name, flat_CDM_subclass_id, flat_CDM_class_name) %>%
group_by_all() %>%
unique %>%
arrange(flat_CDM_class_name, flat_CDM_subclass_name)
example_sections <- c("1199650941",
"1199650950",
"1199650965",
"1199650975",
"1199650999",
"1199651012",
"1199651024",
"1199651039",
"1199651057",
"1199651072",
"1199651084",
"1199651103")
plot_data <- metadata_subset %>%
filter(section %in% example_sections) %>%
filter(x_reconstructed < 5.6)
plot <- ggplot(plot_data,
aes(x=x_reconstructed,
y=y_reconstructed,
color = spatial_domain_level_2
)) +
geom_point(size=.1,
stroke=0,
shape=19,) +
coord_fixed() +
scale_color_manual(values=spatial_domain_palette) +
scale_y_reverse() +
theme(legend.position = "none") +
guides(color = "none") +
facet_wrap(~fct_rev(section), nrow = 2) +
theme_void() +
theme(strip.text = element_blank())
ggsave(filename = "/results/sd_example_sections.png",
plot = plot,
width = 6,
height = 6,
dpi = 160)
plot <- ggplot(plot_data,
aes(x=x_reconstructed,
y=y_reconstructed,
color = spatial_domain_level_1
)) +
geom_point(size=.1,
stroke=0,
shape=19,) +
coord_fixed() +
scale_color_manual(values=spatial_domain_1_palette) +
scale_y_reverse() +
theme(legend.position = "none") +
guides(color = "none") +
facet_wrap(~fct_rev(section), nrow = 2) +
theme_void() +
theme(strip.text = element_blank())
ggsave(filename = "/results/sd1_example_sections.png",
plot = plot,
width = 6,
height = 6,
dpi = 160)
View(plot_data)
View(sd.df)
colnames(plot_data)
broad_ccf_color
broad_ccf_color_palette
plot <- ggplot(plot_data,
aes(x=x_reconstructed,
y=y_reconstructed,
color = ccf_broad
)) +
geom_point(size=.1,
stroke=0,
shape=19,) +
coord_fixed() +
scale_color_manual(values=broad_ccf_color_palette) +
scale_y_reverse() +
theme(legend.position = "none") +
guides(color = "none") +
facet_wrap(~fct_rev(section), nrow = 2) +
theme_void() +
theme(strip.text = element_blank())
plot
ggsave(filename = "/results/ccf_broad_example_sections.png",
plot = plot,
width = 6,
height = 6,
dpi = 160)
