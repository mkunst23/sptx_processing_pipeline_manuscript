vpt <- read_h5ad("/data/merscope_638850_mouseadult_processed_VPT/whole_dataset/mouse_638850_filtered.h5ad")
suppressPackageStartupMessages({
library(dplyr)
library(tibble)
library(tidyr)
library(cowplot)
library(stringr)
library(ggplot2)
library(grid)
library(gridExtra)
library(data.table)
library(rearrr)
library(reticulate)
library(anndata)
library(ttr)
library(devtools)
library(RColorBrewer)
library(googlesheets4)
library(plyr)
library(ggrastr)
library(forcats)
library(scrattch.vis)
})
options(stringsAsFactors = FALSE)
options(scipen=9999)
options(mc.cores=30)
suppressPackageStartupMessages({
library(dplyr)
library(tibble)
library(tidyr)
library(cowplot)
library(stringr)
library(ggplot2)
library(grid)
library(gridExtra)
library(data.table)
library(rearrr)
library(reticulate)
library(anndata)
})
options(stringsAsFactors = FALSE)
options(scipen=9999)
options(mc.cores=20)
# read in old segmentation
#vpt <- read_h5ad("/data/merscope_638850_mouseadult_processed_VPT/whole_dataset/mouse_638850_filtered.h5ad")
#metadata_vpt <- vpt$obs
#save(metadata_vpt, file = "/scratch/metadata_vpt.rda")
load("/scratch/metadata_vpt.rda")
# read in new segmentation
sis <- read_h5ad("/data/merscope_638850_mouseadult_processed_SIS/")
coordinates_sis <- as.data.frame(coordinates_sis)
# read in new segmentation
sis <- read_h5ad("/data/merscope_638850_mouseadult_processed_SIS/")
suppressPackageStartupMessages({
library(anndata)
library(scrattch.vis)
library(dplyr)
library(tibble)
library(tidyr)
library(ttr)
})
# select marker genes:
# exict:Slc17a7,Slc17a6,Nrn1,
# inhib:Slc32a1,Gad2,
# olig:Sox10,Mog
# astro:Aqp4,Gfap,Glis3,
# immune:Arhgap15,Ctss
# vasc: Igf2,Tbx3
marker_genes <- c("Slc17a7","Slc17a6","Nrn1","Slc32a1","Gad2","Sox10","Mog","Aqp4","Gfap","Glis3","Arhgap15","Ctss","Igf2","Tbx3")
# load anndata file for vpt segmentaiton
vpt <- read_h5ad("/data/merscope_638850_mouseadult_processed_VPT/whole_dataset/mouse_638850_filtered.h5ad")
# extract metadata and keep only cell type assignment
metadata_vpt <- vpt$obs
filtered_metadata_vpt <- metadata_vpt %>%
filter(final_filter == FALSE) %>%
select(CDM_cluster_name,
CDM_supertype_name,
CDM_subclass_name,
CDM_class_name)
# extract count matrix and convert to data frame
data <- vpt$X
data <- as.data.frame(data)
# remove unnecessay datasets to save space
rm(vpt)
rm(metadata_vpt)
# Extract row names from metadata
row_names_to_keep <- rownames(filtered_metadata_vpt)
# Subset count matrix to high quality cells
subset_data <- data[row_names_to_keep, ]
# Subset count martrix to marker genes
marker_genes_data <- subset_data %>%
select(all_of(marker_genes))
# Combine datasets
vpt_data_combined <- merge(filtered_metadata_vpt,
marker_genes_data,
by = 0)
vpt_data_combined$Row.names <- NULL
# Convert from wide to long format using column indices
plot_data_vpt <- vpt_data_combined %>%
pivot_longer(
cols = 5:18,           # Specify the columns to pivot by their indices
names_to = "gene",    # Name of the new key column
values_to = "expression"   # Name of the new value column
)
plot_data_vpt$tool <- "VPT"
rm(vpt_data_combined)
# load anndata file for vpt segmentaiton
sis <- read_h5ad("/data/merscope_638850_mouseadult_processed_SIS/whole_dataset/mouse_638850_filtered.h5ad")
# extract metadata and keep only cell type assignment
metadata_sis <- sis$obs
filtered_metadata_sis <- metadata_sis %>%
filter(final_filter == FALSE) %>%
select(CDM_cluster_name,
CDM_supertype_name,
CDM_subclass_name,
CDM_class_name)
# extract count matrix and convert to data frame
data <- sis$X
data <- as.data.frame(data)
# remove unnecessay datasets to save space
rm(sis)
rm(metadata_sis)
# Extract row names from metadata
row_names_to_keep <- rownames(filtered_metadata_sis)
# Subset count matrix to high quality cells
subset_data <- data[row_names_to_keep, ]
# Subset count martrix to marker genes
marker_genes_data <- subset_data %>%
select(all_of(marker_genes))
# Combine datasets
sis_data_combined <- merge(filtered_metadata_sis,
marker_genes_data,
by = 0)
sis_data_combined$Row.names <- NULL
# Convert from wide to long format using column indices
plot_data_sis <- sis_data_combined %>%
pivot_longer(
cols = 5:18,           # Specify the columns to pivot by their indices
names_to = "gene",    # Name of the new key column
values_to = "expression"   # Name of the new value column
)
plot_data_vpt$tool <- "SIS"
# merge datasets
list_of_dfs <- list(plot_data_vpt, plot_data_sis)
plot_data <- rbindlist(list_of_dfs)
library(data.table)
plot_data <- rbindlist(list_of_dfs)
View(plot_data_vpt)
View(plot_data_sis)
plot_data_vpt$tool <- "SIS"
plot_data_vpt$tool <- "VPT"
plot_data_sis$tool <- "SIS"
# merge datasets
list_of_dfs <- list(plot_data_vpt, plot_data_sis)
plot_data <- rbindlist(list_of_dfs)
View(plot_data)
ggplot(plot_data,
aes(x = CDM_class_name,
y = expression,
fill = tool)) +
geom_split_violin(alpha = .4) +
geom_boxplot(width = .2,
alpha = .6,
fatten = NULL,
show.legend = F) +
stat_summary(fun = "median",
show.legend = F,
position = position_dodge(.2)) +
#coord_trans(y = "log10") +
scale_fill_brewer(palette = "Dark2", name = "Segmentation Tool") +
facet_grid(gene ~ .)
ggplot(plot_data,
aes(x = CDM_class_name,
y = expression,
fill = tool)) +
geom_split_violin(alpha = .4) +
# geom_boxplot(width = .2,
#              alpha = .6,
#              fatten = NULL,
#              show.legend = F) +
stat_summary(fun = "median",
show.legend = F,
position = position_dodge(.2)) +
#coord_trans(y = "log10") +
scale_fill_brewer(palette = "Dark2", name = "Segmentation Tool") +
facet_grid(gene ~ .) +
labs(x = "", y = "# of total mRNA molecules per cell") + # Customize axis labels
theme_minimal() + # Remove x-axis elements
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(scrattch.vis)
options(stringsAsFactors = FALSE)
options(scipen=9999)
options(mc.cores=30)
anno <- tasic_2016_anno
library(tasic2016data)
suppressPackageStartupMessages({
library(anndata)
library(scrattch.vis)
library(dplyr)
library(tibble)
library(tidyr)
library(ttr)
library(data.table)
library(scrattch.vis)
library(googlesheets4)
})
options(stringsAsFactors = FALSE)
options(scipen=9999)
options(mc.cores=30)
gs4_deauth()
# select marker genes:
# exict:Slc17a7,Slc17a6,Nrn1,
# inhib:Slc32a1,Gad2,
# olig:Sox10,Mog
# astro:Aqp4,Gfap,Glis3,
# immune:Arhgap15,Ctss
# vasc: Igf2,Tbx3
marker_genes <- c("Slc17a7","Slc17a6","Nrn1","Slc32a1","Gad2","Sox10","Mog","Aqp4","Gfap","Glis3","Arhgap15","Ctss","Igf2","Tbx3")
anno <- read_sheet("https://docs.google.com/spreadsheets/d/1T86EppILF-Q97OjJyd4R2FjUmPUrdYBUEbbiXqgWEoE/edit?gid=674473196#gid=674473196",sheet = "cl.df.v9_230722")
anno <- anno %>%
select(cl,
supertype_label,
subclass_label,
class_label)
ColorPalCluster <- read_sheet("https://docs.google.com/spreadsheets/d/1a4URa_t3oc824vjIA8LcyYmJrv0-2Rm7Q5eJq42re2c/edit?gid=1882477354#gid=1882477354", sheet = "clusters")
ColorPalCluster <- ColorPalCluster %>%
select(cl,
cluster_label,
cluster_id,
cluster_color)
ColorPalSupert <- read_sheet("https://docs.google.com/spreadsheets/d/1a4URa_t3oc824vjIA8LcyYmJrv0-2Rm7Q5eJq42re2c/edit?gid=1882477354#gid=1882477354", sheet = "supertypes")
ColorPalSupert <- ColorPalSupert %>%
select(supertype_label,
supertype_id,
supertype_color)
ColorPalSubclass <- read_sheet("https://docs.google.com/spreadsheets/d/1a4URa_t3oc824vjIA8LcyYmJrv0-2Rm7Q5eJq42re2c/edit?gid=1882477354#gid=1882477354", sheet = "subclasses")
ColorPalSubclass <- ColorPalSubclass %>%
select(subclass_label,
subclass_id,
subclass_color)
ColorPalClass <- read_sheet("https://docs.google.com/spreadsheets/d/1a4URa_t3oc824vjIA8LcyYmJrv0-2Rm7Q5eJq42re2c/edit?gid=1882477354#gid=1882477354", sheet = "classes")
ColorPalClass <- ColorPalClass %>%
select(class_label,
class_id,
class_color)
# load anndata file for vpt segmentaiton
vpt <- read_h5ad("/data/merscope_638850_mouseadult_processed_VPT/whole_dataset/mouse_638850_filtered.h5ad")
# extract metadata and keep only cell type assignment
#metadata_vpt <- vpt$obs
load("/scratch/metadata_vpt.rda")
filtered_metadata_vpt <- metadata_vpt %>%
filter(final_filter == FALSE) %>%
select(flat_CDM_cluster_alias)
# Convert row names into a column
filtered_metadata_vpt <- rownames_to_column(filtered_metadata_vpt, var = "sample_name")
filtered_metadata_vpt <- merge(filtered_metadata_vpt,
anno,
by.x = "flat_CDM_cluster_alias",
by.y = "cl",
all.x = T,
all.y = F)
filtered_metadata_vpt <- merge(filtered_metadata_vpt,
ColorPalCluster,
by.x = "flat_CDM_cluster_alias",
by.y = "cl",
all.x = T,
all.y = F)
filtered_metadata_vpt <- merge(filtered_metadata_vpt,
ColorPalSupert,
by = "supertype_label",
all.x = T,
all.y = F)
filtered_metadata_vpt <- merge(filtered_metadata_vpt,
ColorPalSubclass,
by = "subclass_label",
all.x = T,
all.y = F)
filtered_metadata_vpt <- merge(filtered_metadata_vpt,
ColorPalClass,
by = "class_label",
all.x = T,
all.y = F)
# extract count matrix and convert to data frame
data_vpt <- vpt$X
data_vpt <- as.data.frame(data_vpt)
# Convert row names into a column
data_vpt <- rownames_to_column(data_vpt, var = "sample_name")
save(data_vpt, file = "/scratch/data_vpt.rda")
# extract count matrix and convert to data frame
# data_vpt <- vpt$X
# data_vpt <- as.data.frame(data_vpt)
# Convert row names into a column
# data_vpt <- rownames_to_column(data_vpt, var = "sample_name")
# save(data_vpt, file = "/scratch/data_vpt.rda")
load("/scratch/data_vpt.rda")
# remove unnecessay datasets to save space
rm(vpt)
# Extract row names from metadata
cells_to_keep <- filtered_metadata_vpt$sample_name
# Subset count matrix to high quality cells
subset_data_vpt <- data_vpt %>%
filter(sample_name %in% cells_to_keep)
# Subset count martrix to marker genes
marker_genes_data <- subset_data_vpt %>%
select(sample_name,
all_of(marker_genes))
plot_anno_vpt <-  filtered_metadata_vpt %>%
filter(subclass_label == "Sncg Gaba")
plot_data_vpt <- subset_data_vpt %>%
filter(sample_name %in% plot_anno_vpt$sample_name)
group_violin_plot(subset_data_vpt,
filtered_metadata_vpt,
genes = c("Slc17a7","Slc17a6","Nrn1",
"Slc32a1","Gad2",
"Sox10","Mog",
"Aqp4","Gfap","Glis3",
"Igf2","Tbx3",
"Arhgap15","Ctss"),
grouping = "class",
log_scale = FALSE,
font_size = 5,
rotate_counts = TRUE)
sample_fire_plot(subset_data_vpt,
filtered_metadata_vpt,
genes = c("Slc17a7","Slc17a6","Nrn1",
"Slc32a1","Gad2",
"Sox10","Mog",
"Aqp4","Gfap","Glis3",
"Igf2","Tbx3",
"Arhgap15","Ctss"),
grouping = "class",
log_scale = TRUE,
top_value = "lowest",
font_size = 8)
group_heatmap_plot(subset_data_vpt,
filtered_metadata_vpt,
genes = c("Slc17a7","Slc17a6","Nrn1",
"Slc32a1","Gad2",
"Sox10","Mog",
"Aqp4","Gfap","Glis3",
"Igf2","Tbx3",
"Arhgap15","Ctss"),
grouping = "class",
stat = "tmean",
log_scale = TRUE,
font_size = 8,
rotate_counts = TRUE)
suppressPackageStartupMessages({
library(anndata)
library(scrattch.vis)
library(dplyr)
library(tibble)
library(tidyr)
library(ttr)
library(data.table)
library(scrattch.vis)
library(googlesheets4)
})
options(stringsAsFactors = FALSE)
options(scipen=9999)
suppressPackageStartupMessages({
library(dplyr)
library(tibble)
library(tidyr)
library(cowplot)
library(stringr)
library(ggplot2)
library(grid)
library(gridExtra)
library(data.table)
library(rearrr)
library(reticulate)
library(anndata)
library(ttr)
library(devtools)
library(RColorBrewer)
library(googlesheets4)
library(plyr)
library(forcats)
})
# load data segmented with in-house cellpose model
load("/scratch/metadata_sis.rda")
options(stringsAsFactors = FALSE)
options(scipen=9999)
options(mc.cores=30)
# filter out relvevant columns
filtered_metadata_sis <- metadata_sis %>%
select(cell_label,
polygon_center_x,
polygon_center_y,
polygon_center_z,
volume,
section,
n_genes_by_counts,
total_counts,
total_counts_Blank,
pct_counts_Blank,
genes_filter,
mrna_filter,
blanks_filter,
basic_qc_filter,
dif,
doublets_thr,
doublets_filter,
flat_CDM_class_name,
flat_CDM_class_avg_correlation,
CDM_class_color,
flat_CDM_subclass_name,
flat_CDM_subclass_avg_correlation,
CDM_subclass_color,
flat_CDM_supertype_name,
flat_CDM_supertype_avg_correlation,
CDM_supertype_color,
flat_CDM_cluster_name,
flat_CDM_cluster_avg_correlation,
CDM_cluster_color)
genes_filter_threshold <- 6
ggplot(filtered_metadata_sis,
aes(x = factor(1),
y = n_genes_by_counts)) +
geom_violin(fill = "red") +
geom_boxplot(width = .2,
alpha = .6,
fatten = NULL,
show.legend = F) +
stat_summary(fun = "median",
show.legend = F,
position = position_dodge(.2)) +
geom_hline(yintercept = genes_filter_threshold,
linetype = "dashed",
color = "blue") +
labs(x = "",
y = "# of detected genes per cell") +
theme_minimal()
plot <- ggplot(filtered_metadata_sis,
aes(x = factor(1),
y = n_genes_by_counts)) +
geom_violin(fill = "red") +
geom_boxplot(width = .2,
alpha = .6,
fatten = NULL,
show.legend = F) +
stat_summary(fun = "median",
show.legend = F,
position = position_dodge(.2)) +
geom_hline(yintercept = genes_filter_threshold,
linetype = "dashed",
color = "black") +
labs(x = "",
y = "# of detected genes per cell") +
theme_minimal()
plot
ggsave(filename = "/results/distribution_genes_filter.pdf",
plot = plot,
width = 5,
height = 8,
dpi = 300)
example_sections = c("1199651009",
"1199650956",
"1199651084")
example_sections_plot <- filtered_metadata_sis %>%
filter(section %in% example_sections)
colnames(metadata_sis)
# plot sections
plot <- ggplot(example_vpt,
aes(x=polygon_center_x,
y=polygon_center_y,
color = genes_filter
)) +
geom_point(size=.1,stroke=0,shape=19,) +
coord_fixed() +
ggtitle("Gene Filter") +
#scale_color_manual(values=CCF_regions_color) +
scale_y_reverse() +
theme(legend.position = "none") +
guides(color = "none") +
facet_wrap(~section, ncol = 1) +
theme_void()
# plot sections
plot <- ggplot(example_sections_plot,
aes(x=polygon_center_x,
y=polygon_center_y,
color = genes_filter
)) +
geom_point(size=.1,stroke=0,shape=19,) +
coord_fixed() +
ggtitle("Gene Filter") +
#scale_color_manual(values=CCF_regions_color) +
scale_y_reverse() +
theme(legend.position = "none") +
guides(color = "none") +
facet_wrap(~section, ncol = 1) +
theme_void()
plot
example_sections_plot
View(example_sections_plot)
sis <- read_h5ad("/data/merscope_638850_mouseadult_processed_SIS/whole_dataset/mouse_638850_filtered.h5ad")
sis
coordinates_sis <- as.matrix(sis$obsm$spatial_rotate)
coordinates_sis <- as.data.frame(coordinates_sis)
View(coordinates_sis)
rownames(sis$X)
View(metadata_sis)
coordinates_sis <- as.matrix(sis$obsm$spatial_rotate)
rownames(coordinates_sis) <- rownames(sis$X)
coordinates_sis <- as.data.frame(coordinates_sis)
colnames(coordinates_sis) <- c("x_coordinate","y_coordinate")
setdiff(rownames(metadata_sis), rownames(coordinates_sis))
length(intersect(rownames(metadata_sis), rownames(coordinates_sis)))
save(coordinates_sis, file = "/scratch/coordinates_sis.rda")
load("/scratch/coordinates_sis.rda")
source("~/capsule/code/plot_qc_criteria.R")
