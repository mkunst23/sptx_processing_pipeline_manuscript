theme_void()
plot
example_sections_plot
View(example_sections_plot)
sis <- read_h5ad("/data/merscope_638850_mouseadult_processed_SIS/whole_dataset/mouse_638850_filtered.h5ad")
sis
coordinates_sis <- as.matrix(sis$obsm$spatial_rotate)
coordinates_sis <- as.data.frame(coordinates_sis)
View(coordinates_sis)
rownames(sis$X)
View(metadata_sis)
coordinates_sis <- as.matrix(sis$obsm$spatial_rotate)
rownames(coordinates_sis) <- rownames(sis$X)
coordinates_sis <- as.data.frame(coordinates_sis)
colnames(coordinates_sis) <- c("x_coordinate","y_coordinate")
setdiff(rownames(metadata_sis), rownames(coordinates_sis))
length(intersect(rownames(metadata_sis), rownames(coordinates_sis)))
save(coordinates_sis, file = "/scratch/coordinates_sis.rda")
load("/scratch/coordinates_sis.rda")
source("~/capsule/code/plot_qc_criteria.R")
suppressPackageStartupMessages({
library(dplyr)
library(tibble)
library(tidyr)
library(stringr)
library(data.table)
library(rearrr)
library(reticulate)
library(anndata)
library(plyr)
library(randomcoloR)
library(ggplot2)
})
options(stringsAsFactors = FALSE)
options(scipen=9999)
options(mc.cores=30)
sis <- read_h5ad("/data/merscope_638850_687997_mouseadult_each_dataset_staligner_harmony_integration_fullcell_spatial_subdomain/mouse_687997_fullcell_spatial_subdommain.h5ad")
sis <- read_h5ad("/data/merscope_638850_687997_mouseadult_each_dataset_staligner_harmony_integration_fullcell_spatial_subdomain/mouse_687997_fullcell_spatial_subdommain.h5ad")
metadata_sis <- sis$obs
coordinates_sis <- as.matrix(sis$obsm$spatial_rotate)
rownames(coordinates_sis) <- metadata_sis$production_cell_id
coordinates_sis <- as.data.frame(coordinates_sis)
colnames(coordinates_sis) <- c("x_coordinate","y_coordinate")
metadata_sis <- merge(metadata_sis,
coordinates_sis,
by.x = "production_cell_id",
by.y = 0)
metadata_subset <- metadata_sis %>%
filter(final_filter == F) %>%
select(production_cell_id,
section,
x_coordinate,
y_coordinate,
flat_CDM_class_name,
flat_CDM_subclass_name,
flat_CDM_supertype_name,
flat_CDM_cluster_name,
leiden_STAligner_Harmony_1.2_sub0.2_knn_8,
leiden_STAligner_Harmony_1.2_sub0.4_knn_8,
leiden_STAligner_Harmony_1.2_sub0.5_knn_8,
leiden_STAligner_Harmony_1.2_sub0.6_knn_8,
leiden_STAligner_Harmony_1.2_sub0.8_knn_8,
leiden_STAligner_Harmony_1.2_sub1.0_knn_8,
leiden_STAligner_Harmony_1.2_sub1.2_knn_8,
leiden_STAligner_Harmony_1.2_sub1.4_knn_8,
leiden_STAligner_Harmony_1.2_sub1.5_knn_8,
leiden_STAligner_Harmony_1.2_sub1.6_knn_8,
leiden_STAligner_Harmony_1.2_sub1.8_knn_8,
leiden_STAligner_Harmony_1.2_sub2.0_knn_8)
unique(metadata_sis$leiden_STAligner_Harmony_1.2_sub1.0_knn_8)
# plot sptial domains
leiden_cluster_colors <- randomColor(length(unique(metadata_sis$leiden_STAligner_Harmony_1.2_sub1.0_knn_8)), luminosity="dark")
leiden_cluster_palette <- setNames(leiden_cluster_colors, unique(metadata_sis$leiden_STAligner_Harmony_1.2_sub1.0_knn_8))
leiden_cluster_palette
ggplot(example_sis,
aes(x=x_coordinate,
y=y_coordinate,
fill=leiden_STAligner_Harmony_1.2_sub1.0_knn_8
)) +
geom_point(size=.1,stroke=0,shape=19) +
coord_fixed() +
ggtitle("SIS Segmentation") +
scale_fill_manual(values=leiden_cluster_palette) +
scale_y_reverse() +
theme(legend.position = "none") +
guides(color = "none") +
facet_wrap(~section) +
theme_void()
# set of sections
section_set <- c("1288760831","1288760835","1288760841","1288760845")
example_sis <- metadata_sis %>%
filter(section %in% section_set)
ggplot(example_sis,
aes(x=x_coordinate,
y=y_coordinate,
fill=leiden_STAligner_Harmony_1.2_sub1.0_knn_8
)) +
geom_point(size=.1,stroke=0,shape=19) +
coord_fixed() +
ggtitle("SIS Segmentation") +
scale_fill_manual(values=leiden_cluster_palette) +
scale_y_reverse() +
theme(legend.position = "none") +
guides(color = "none") +
facet_wrap(~section) +
theme_void()
unique(metadata_sis$section)
colnames(metadata_sis)
# set of sections
section_set <- c("1288760871","1288760876","1288760880","1288760883")
example_sis <- metadata_sis %>%
filter(section %in% section_set)
ggplot(example_sis,
aes(x=x_coordinate,
y=y_coordinate,
fill=leiden_STAligner_Harmony_1.2_sub1.0_knn_8
)) +
geom_point(size=.1,stroke=0,shape=19) +
coord_fixed() +
ggtitle("SIS Segmentation") +
scale_fill_manual(values=leiden_cluster_palette) +
scale_y_reverse() +
theme(legend.position = "none") +
guides(color = "none") +
facet_wrap(~section) +
theme_void()
View(example_sis)
example_sis <- metadata_subset %>%
filter(section %in% section_set)
View(example_sis)
View(metadata_sis)
example_sis <- metadata_subset %>%
filter(leiden_STAligner_Harmony_1.2_sub1.0_knn_8 != "NA")
ggplot(example_sis,
aes(x=x_coordinate,
y=y_coordinate,
fill=leiden_STAligner_Harmony_1.2_sub1.0_knn_8
)) +
geom_point(size=.1,stroke=0,shape=19) +
coord_fixed() +
ggtitle("SIS Segmentation") +
scale_fill_manual(values=leiden_cluster_palette) +
scale_y_reverse() +
theme(legend.position = "none") +
guides(color = "none") +
facet_wrap(~section) +
theme_void()
source("~/capsule/code/region_analysis.R")
suppressPackageStartupMessages({
library(dplyr)
library(tibble)
library(tidyr)
library(stringr)
library(ggplot2)
library(grid)
library(gridExtra)
library(anndata)
library(googlesheets4)
library(data.table)
library(reshape)
library(forcats)
library(entropy)
library(aplot)
library(vegan)
library(ggridges)
library(scales)
library(DescTools)
library(RColorBrewer)
library(philentropy)
library(igraph)
library(paletteer)
})
options(stringsAsFactors = FALSE)
options(scipen=999)
options(mc.cores=30)
gs4_deauth()
# function to calculate gini coefficient for each row of a data frame
calcGini <- function(row) {
Gini(row, unbiased = FALSE)
}
# define grey and white matter
grey_matter <- c("CB",
"CTXsp",
"HIP",
"HY",
"Isocortex",
"LSX",
"MB",
"MY",
"OLF",
"P",
"PAL",
"RHP",
"sAMY",
"STR",
"TH")
white_matter <- c("fiber tracts",
"VS")
# define glial subclasses
glia_sc <- c("316 Bergmann NN",
"317 Astro-CB NN",
"318 Astro-NT NN",
"319 Astro-TE NN",
"320 Astro-OLF NN",
"321 Astroependymal NN",
"326 OPC NN",
"327 Oligo NN",
"328 OEC NN")
# define neuronal classes
neuronal_classes <- c("01 IT-ET Glut",
"02 NP-CT-L6b Glut",
"03 OB-CR Glut",
"04 DG-IMN Glut",
"05 OB-IMN GABA",
"06 CTX-CGE GABA",
"07 CTX-MGE GABA",
"08 CNU-MGE GABA",
"09 CNU-LGE GABA",
"10 LSX GABA",
"11 CNU-HYa GABA",
"12 HY GABA",
"13 CNU-HYa Glut",
"14 HY Glut",
"15 HY Gnrh1 Glut",
"16 HY MM Glut",
"17 MH-LH Glut",
"18 TH Glut",
"19 MB Glut",
"20 MB GABA",
"21 MB Dopa",
"22 MB-HB Sero",
"23 P Glut",
"24 MY Glut",
"26 P GABA",
"27 MY GABA",
"28 CB GABA",
"29 CB Glut")
cl.df <- read_sheet("https://docs.google.com/spreadsheets/d/1T86EppILF-Q97OjJyd4R2FjUmPUrdYBUEbbiXqgWEoE/edit#gid=1639101745",sheet = "cl.df.v9_230722")
# select only necessary columns (labels plus max region and ratio)
cl.df <- cl.df %>%
dplyr::select(cluster_id_label,
nt_type_label,
nt_type_combo_label)
# create CCF region colors
ccf_anno <- read_sheet("https://docs.google.com/spreadsheets/d/1QOhsYhlsk2KE2pZuSnEwUhEIG4mh782PcAgHrtJyRYI/edit#gid=0",
sheet="CCFv3")
# create color scheme
CCF_regions_color <- ccf_anno %>%
select(acronym,color_hex_triplet)
CCF_regions_color$color_hex_triplet <- gsub("^", "#", CCF_regions_color$color_hex_triplet)
CCF_regions_color <- setNames(CCF_regions_color$color_hex_triplet, CCF_regions_color$acronym)
ccf_anno <- ccf_anno %>%
select(acronym,
graph_order)
# grab colors for the different levels of cell types. Thsoe will be used later for plotting
ss <- "https://docs.google.com/spreadsheets/d/1a4URa_t3oc824vjIA8LcyYmJrv0-2Rm7Q5eJq42re2c/edit?usp=sharing"
class_colors <- read_sheet(ss,sheet="classes")
subclass_colors <- read_sheet(ss, sheet="subclasses")
supertype_colors <- read_sheet(ss, sheet="supertypes")
rcol <- read_sheet(ss, sheet = "Region")
nt_type_col <- read_sheet(ss, sheet = "nt_type")
proportion_colors <- c('#005DFFFF',
"#0080FFFF",
"#00A2FFFF",
'#00C3FFFF',
"#00E5FFFF",
"#00FF4DFF",
"#00FF2BFF",
"#00FF08FF",
'#1AFF00FF',
"#3CFF00FF",
"#5DFF00FF",
"#80FF00FF",
"#A2FF00FF",
"#C3FF00FF",
"#E6FF00FF",
"#FFFF00FF",
"#FFF514FF",
"#FFEC28FF",
"#FFE53CFF",
"#FFE04FFF",
"#FFDC63FF",
"#FFD100FF",
"#FFC500FF",
"#FFB900FF",
"#FFAE00FF",
"#FFA200FF",
"#FF9700FF",
"#FF8B00FF",
"#FF8000FF",
"#FF7400FF",
"#FF6800FF",
"#FF5D00FF",
"#FF5100FF",
"#FF4600FF",
"#FF3A00FF",
"#FF2E00FF",
"#FF2300FF",
"#FF1700FF")
# read in metadata file
load("/scratch/687997_metadata_sis.rda")
metadata_sis <- metadata_sis %>%
mutate(temp = flat_CDM_class_name) %>%
separate(temp,
into = c("flat_CDM_class_id", "flat_CDM_class_string"),
sep = " ",
extra = "merge",
fill = "right")
metadata_sis <- metadata_sis %>%
mutate(temp = flat_CDM_subclass_name) %>%
separate(temp,
into = c("flat_CDM_subclass_id", "flat_CDM_subclass_string"),
sep = " ",
extra = "merge",
fill = "right")
metadata_sis <- metadata_sis %>%
mutate(temp = flat_CDM_supertype_name) %>%
separate(temp,
into = c("flat_CDM_supertype_id", "flat_CDM_supertype_string"),
sep = " ",
extra = "merge",
fill = "right")
suppressPackageStartupMessages({
library(dplyr)
library(tibble)
library(tidyr)
library(stringr)
library(ggplot2)
library(grid)
library(gridExtra)
library(anndata)
library(googlesheets4)
library(data.table)
library(reshape)
library(forcats)
library(entropy)
library(aplot)
library(vegan)
library(ggridges)
library(scales)
library(DescTools)
library(RColorBrewer)
library(philentropy)
library(igraph)
library(paletteer)
})
options(stringsAsFactors = FALSE)
options(scipen=999)
options(mc.cores=30)
gs4_deauth()
# define glial subclasses
glia_sc <- c("316 Bergmann NN",
"317 Astro-CB NN",
"318 Astro-NT NN",
"319 Astro-TE NN",
"320 Astro-OLF NN",
"321 Astroependymal NN",
"326 OPC NN",
"327 Oligo NN",
"328 OEC NN")
# define neuronal classes
neuronal_classes <- c("01 IT-ET Glut",
"02 NP-CT-L6b Glut",
"03 OB-CR Glut",
"04 DG-IMN Glut",
"05 OB-IMN GABA",
"06 CTX-CGE GABA",
"07 CTX-MGE GABA",
"08 CNU-MGE GABA",
"09 CNU-LGE GABA",
"10 LSX GABA",
"11 CNU-HYa GABA",
"12 HY GABA",
"13 CNU-HYa Glut",
"14 HY Glut",
"15 HY Gnrh1 Glut",
"16 HY MM Glut",
"17 MH-LH Glut",
"18 TH Glut",
"19 MB Glut",
"20 MB GABA",
"21 MB Dopa",
"22 MB-HB Sero",
"23 P Glut",
"24 MY Glut",
"26 P GABA",
"27 MY GABA",
"28 CB GABA",
"29 CB Glut")
# read in metadata file
load("/scratch/638850_metadata_sis.rda")
metadata_sis <- metadata_sis %>%
mutate(temp = flat_CDM_class_name) %>%
separate(temp,
into = c("flat_CDM_class_id", "flat_CDM_class_string"),
sep = " ",
extra = "merge",
fill = "right")
metadata_sis <- metadata_sis %>%
mutate(temp = flat_CDM_subclass_name) %>%
separate(temp,
into = c("flat_CDM_subclass_id", "flat_CDM_subclass_string"),
sep = " ",
extra = "merge",
fill = "right")
metadata_sis <- metadata_sis %>%
mutate(temp = flat_CDM_supertype_name) %>%
separate(temp,
into = c("flat_CDM_supertype_id", "flat_CDM_supertype_string"),
sep = " ",
extra = "merge",
fill = "right")
metadata_sis <- metadata_sis %>%
mutate(temp = flat_CDM_cluster_name) %>%
separate(temp,
into = c("flat_CDM_cluster_id", "flat_CDM_cluster_string"),
sep = " ",
extra = "merge",
fill = "right")
metadata_sis <- merge(metadata_sis,
cl.df,
by.x = "flat_CDM_cluster_name",
by.y = "cluster_id_label",
all.x = T,
all.y = F)
cl.df <- read_sheet("https://docs.google.com/spreadsheets/d/1T86EppILF-Q97OjJyd4R2FjUmPUrdYBUEbbiXqgWEoE/edit#gid=1639101745",sheet = "cl.df.v9_230722")
# select only necessary columns (labels plus max region and ratio)
cl.df <- cl.df %>%
dplyr::select(cluster_id_label,
nt_type_label,
nt_type_combo_label)
sd.df <- read_sheet("https://docs.google.com/spreadsheets/d/1UpfDYDbq3s0Jeh8cLg9Y0yhPCJxH_H8WG4Y0y0_mNHg/edit?gid=70495470#gid=70495470", sheet = "638850_v3")
metadata_sis <- merge(metadata_sis,
cl.df,
by.x = "flat_CDM_cluster_name",
by.y = "cluster_id_label",
all.x = T,
all.y = F)
sd.df <- read_sheet("https://docs.google.com/spreadsheets/d/1UpfDYDbq3s0Jeh8cLg9Y0yhPCJxH_H8WG4Y0y0_mNHg/edit?gid=70495470#gid=70495470", sheet = "638850_v3")
colnames(sd.df)
# select only necessary columns
sd.df <- sd.df %>%
dplyr::select(Cluster_id,
spatial_domain_level_1,
spatial_domain_level_2,
ccf_broad)
sort(unique(metadata_sis$leiden_res_1.2_knn_8))
metadata_sis <- merge(metadata_sis,
sd.df,
by.x = "leiden_res_1.2_knn_8",
by.y = "Cluster_id",
all.x = T,
all.y = F)
broad_ccf_color <- read_sheet("https://docs.google.com/spreadsheets/d/1UpfDYDbq3s0Jeh8cLg9Y0yhPCJxH_H8WG4Y0y0_mNHg/edit?gid=70495470#gid=70495470", sheet = "CCF_broad_region_color")
broad_ccf_color_palette <- setNames(broad_ccf_color$color_hex_tripet, broad_ccf_color$ccf_broad)
broad_ccf_color_palette
broad_ccf_color <- read_sheet("https://docs.google.com/spreadsheets/d/1UpfDYDbq3s0Jeh8cLg9Y0yhPCJxH_H8WG4Y0y0_mNHg/edit?gid=70495470#gid=70495470", sheet = "CCF_broad_region_color")
broad_ccf_color_palette <- setNames(broad_ccf_color$color_hex_tripet, broad_ccf_color$ccf_broad)
metadata_subset <- metadata_sis %>%
filter(final_filter == F) %>%
select(cell_id,
section,
leiden_res_1.2_knn_8,
flat_CDM_class_name,
flat_CDM_class_id,
flat_CDM_subclass_name,
flat_CDM_subclass_id,
flat_CDM_supertype_name,
flat_CDM_supertype_id,
flat_CDM_cluster_label,
flat_CDM_cluster_id,
nt_type_label,
nt_type_combo_label,
structure_acronym,
structure_id,
spatial_domain_level_1,
spatial_domain_level_2,
ccf_broad
CCF_level1,
metadata_subset <- metadata_sis %>%
filter(final_filter == F) %>%
select(cell_id,
section,
leiden_res_1.2_knn_8,
flat_CDM_class_name,
flat_CDM_class_id,
flat_CDM_subclass_name,
flat_CDM_subclass_id,
flat_CDM_supertype_name,
flat_CDM_supertype_id,
flat_CDM_cluster_label,
flat_CDM_cluster_id,
nt_type_label,
nt_type_combo_label,
structure_acronym,
structure_id,
spatial_domain_level_1,
spatial_domain_level_2,
ccf_broad,
CCF_level1,
CCF_level2,
volume_x,
volume_y,
volume_z,
mapped)
# grab colors for the different levels of cell types. Thsoe will be used later for plotting
ss <- "https://docs.google.com/spreadsheets/d/1a4URa_t3oc824vjIA8LcyYmJrv0-2Rm7Q5eJq42re2c/edit?usp=sharing"
class_colors <- read_sheet(ss,sheet="classes")
subclass_colors <- read_sheet(ss, sheet="subclasses")
supertype_colors <- read_sheet(ss, sheet="supertypes")
rcol <- read_sheet(ss, sheet = "Region")
nt_type_col <- read_sheet(ss, sheet = "nt_type")
